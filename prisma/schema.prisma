generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Role {
  id               Int              @id @default(autoincrement())
  code             String           @unique
  name             String
  is_active        Boolean          @default(true)
  created_at       DateTime         @default(now())
  updated_at       DateTime         @updatedAt
  users            User[]
  rolePermissions  RolePermission[]
}

model Permission {
  id               Int              @id @default(autoincrement())
  code             String           @unique
  name             String
  category         String
  created_at       DateTime         @default(now())
  updated_at       DateTime         @updatedAt
  rolePermissions  RolePermission[]
}

model RolePermission {
  id           Int         @id @default(autoincrement())
  roleId       Int
  permissionId Int
  role         Role        @relation(fields: [roleId], references: [id])
  permission   Permission  @relation(fields: [permissionId], references: [id])
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  @@unique([roleId, permissionId])
}

model User {
  id            String          @id @default(uuid())
  username      String          @unique
  officeName    String          @unique
  email         String?         @unique
  phoneNo       String?         @unique
  password      String
  roleId        Int
  role          Role            @relation(fields: [roleId], references: [id])
  flowMaps      FlowMap[]       // ✅ One User -> Many Flows
  nextUserInFlows FlowNextUser[] @relation("NextUserInFlow") // ✅ ADD THIS
  actionsFrom   ActionHistory[]  @relation("ActionFromUser") // ✅ ADD THIS (see 2️⃣ below)
  actionsTo     ActionHistory[]  @relation("ActionToUser")   // ✅ ADD THIS (see 2️⃣ below)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}

model FlowMap {
  id            String           @id @default(uuid())
  currentUserId String
  currentUser   User             @relation(fields: [currentUserId], references: [id])
  nextUsers     FlowNextUser[]
  actions       ActionHistory[]  // ✅ Add this opposite relation
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
}


model FlowNextUser {
  id         String   @id @default(uuid())
  flowMapId  String
  nextUserId String
  nextUser   User     @relation("NextUserInFlow", fields: [nextUserId], references: [id])  // ✅ NAMED relation
  flowMap    FlowMap  @relation(fields: [flowMapId], references: [id])
}

model ActionHistory {
  id             String    @id @default(uuid())
  flowMapId      String
  flowMap        FlowMap   @relation(fields: [flowMapId], references: [id]) // ✅ Good now
  fromUserId     String
  toUserId       String
  fromUser       User      @relation("ActionFromUser", fields: [fromUserId], references: [id])
  toUser         User      @relation("ActionToUser", fields: [toUserId], references: [id])
  actionTaken    String
  createdAt      DateTime  @default(now())
}

